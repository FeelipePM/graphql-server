generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(uuid())
  name      String
  email     String   @unique
  password  String
  birthDate String
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())

  UserRole UserRole[]
  Author   Author?
  @@map("users")
}

model Role {
  name      String
  code      String   @id @default(uuid())
  createdAt DateTime @default(now())

  UserRole   UserRole[]
  Permission Permission[]
  @@map("roles")
}

model Permission {
  id          String   @id @default(uuid())
  description String
  code        String
  role_id     String   @unique
  role        Role     @relation(fields: [role_id], references: [code])
  createdAt   DateTime @default(now())

  @@map("permissions")
}

model UserRole {
  id        String   @id @default(uuid())
  user_id   String
  role_id   String
  roles     Role     @relation(fields: [role_id], references: [code])
  users     User     @relation(fields: [user_id], references: [id])
  createdAt DateTime @default(now())

  @@map("user_roles")
}

model Author {
  id              String @id @default(uuid())
  user_id         String @unique
  author          User   @relation(fields: [user_id], references: [id])
  bio_description String

  Post Post[]

  @@map("authors")
}

model Post {
  id           String   @id @default(uuid())
  content      String
  author_id    String
  author       Author   @relation(fields: [author_id], references: [id])
  published    Boolean  @default(false)
  published_at DateTime @default(now())

  PostImages PostImages[]
  @@map("posts")
}

model PostImages {
  id      String @id @default(uuid())
  path    String
  post_id String
  post    Post   @relation(fields: [post_id], references: [id])

  @@map("post_images")
}
